---
alwaysApply: true
---

# 开发流程严格约束规则

## ⚡ 开发环境稳定性原则

### 🔄 "一次对话原则"

#### ✅ 正确的开发流程
```bash
# 1. 启动开发环境（一次对话开始时）
pnpm run dev:weapp

# 2. 保持环境运行，通过代码调试解决问题
# - 查看控制台错误信息
# - 分析代码逻辑问题
# - 使用调试工具排查
# - 查看网络请求状态

# 3. 只在确认环境问题时才重启
# 比如：端口冲突、内存溢出、配置变更等
```

#### ❌ 严格禁止的操作模式
```bash
# ❌ 禁止：遇到问题就重启服务
pnpm run dev:weapp    # 启动
# 发现一个小问题
Ctrl+C                # ❌ 立即停止
pnpm run dev:weapp    # ❌ 重新启动

# ❌ 禁止：频繁切换端口或环境
pnpm run dev:weapp    # 8080端口
Ctrl+C
pnpm run dev:h5       # ❌ 切换到H5
Ctrl+C
pnpm run dev:weapp    # ❌ 又切换回小程序
```

### 🛠️ 问题解决优先级

#### 1️⃣ 优先级1：代码层面调试
```typescript
// ✅ 优先使用代码调试方法
console.log('调试信息:', data)           // 控制台输出
console.error('错误信息:', error)        // 错误信息
console.table(arrayData)                // 表格形式显示数据

// ✅ 检查代码逻辑
if (data) {
  console.log('数据存在:', data)
} else {
  console.log('数据不存在，检查API调用')
}

// ✅ 使用Taro调试工具
Taro.showToast({ title: '调试信息', icon: 'none' })
```

#### 2️⃣ 优先级2：配置和依赖检查
```bash
# ✅ 检查依赖是否正确安装
pnpm list

# ✅ 检查配置文件
cat package.json
cat project.config.json

# ✅ 清理缓存（如果确认是缓存问题）
rm -rf node_modules/.cache
```

#### 3️⃣ 优先级3：环境重启（最后手段）
```bash
# ✅ 只有在确认是环境问题时才重启
# 比如：端口被占用、内存泄漏、配置变更等
Ctrl+C
pnpm run dev:weapp
```

## 🔍 系统性问题分析流程

### 📊 问题分析步骤

#### 第1步：停下来理解问题
```typescript
// ✅ 正确的问题分析流程
const analyzeProlem = () => {
  // 1. 停止盲目尝试
  console.log('停止当前操作，开始分析问题')
  
  // 2. 收集问题信息
  const problemInfo = {
    errorMessage: '错误信息是什么？',
    expectedBehavior: '期望的行为是什么？',
    actualBehavior: '实际发生了什么？',
    recentChanges: '最近做了什么修改？',
    environment: '在什么环境下发生？'
  }
  
  // 3. 分析可能原因
  const possibleCauses = [
    '代码逻辑错误',
    '依赖版本问题', 
    '配置文件错误',
    '环境变量问题',
    '网络连接问题'
  ]
  
  return { problemInfo, possibleCauses }
}
```

#### ❌ 禁止的盲目操作模式
```typescript
// ❌ 错误的问题处理方式
const blindTrying = () => {
  // ❌ 不分析直接尝试方案1
  try { solution1() } catch { /* 忽略错误 */ }
  
  // ❌ 方案1失败，立即尝试方案2
  try { solution2() } catch { /* 继续忽略 */ }
  
  // ❌ 方案2失败，继续尝试方案3
  try { solution3() } catch { /* 还是忽略 */ }
  
  // ❌ 最终什么都没解决，浪费大量时间
}
```

### 🎯 系统性解决方案

#### ✅ 制定针对性解决策略
```typescript
const systematicSolution = (problemInfo: ProblemInfo) => {
  // 1. 基于分析制定解决方案
  const targetedSolutions = {
    '代码逻辑错误': () => {
      // 逐行检查代码逻辑
      // 添加详细的console.log
      // 使用调试器断点调试
    },
    '依赖版本问题': () => {
      // 检查package.json版本
      // 查看依赖冲突
      // 重新安装依赖
    },
    '配置文件错误': () => {
      // 对比正确的配置
      // 检查路径是否正确
      // 验证配置语法
    }
  }
  
  // 2. 按优先级执行解决方案
  // 3. 验证解决效果
  // 4. 如果没解决，重新分析
}
```

## 📋 开发效率优化原则

### 🚀 "复制优先"策略

#### ✅ 高效开发流程
```typescript
// 1. 查找现有类似实现
const findExistingCode = () => {
  // 查看现有组件
  // 查看现有页面
  // 查看现有逻辑
}

// 2. 复制基础结构
const copyExistingStructure = () => {
  // 复制文件结构
  // 复制基础代码
  // 复制样式框架
}

// 3. 最小化修改适配
const minimalModification = () => {
  // 只修改必要的差异
  // 保持原有代码风格
  // 避免大范围重构
}
```

#### ❌ 低效的开发模式
```typescript
// ❌ 从零开始实现
const startFromScratch = () => {
  // 重新设计组件架构
  // 重新写所有样式
  // 重新实现所有逻辑
  // 浪费大量时间
}
```

### ⏱️ 时间管控原则

#### 🎯 避免长时间阻碍流程
```typescript
const timeManagement = {
  // ✅ 单个问题解决时间限制
  maxTimePerIssue: '15分钟',
  
  // ✅ 如果15分钟内无法解决
  escalationStrategy: [
    '1. 寻求帮助或建议',
    '2. 换个角度分析问题', 
    '3. 暂时跳过，继续其他任务',
    '4. 重新评估问题复杂度'
  ],
  
  // ✅ 避免陷入死循环
  avoidInfiniteLoop: [
    '不要反复尝试相同的方案',
    '每次尝试都要有新的分析',
    '及时求助或调整策略'
  ]
}
```

## 🤝 协作沟通原则

### 💬 有效沟通策略

#### ✅ 问题描述规范
```typescript
const problemDescription = {
  // ✅ 清晰描述问题
  what: '具体发生了什么问题',
  when: '什么时候发生的',
  where: '在哪个模块/页面发生',
  how: '如何重现这个问题',
  
  // ✅ 提供上下文信息
  recentChanges: '最近的代码变更',
  errorMessages: '具体的错误信息',
  expectedResult: '期望的结果',
  actualResult: '实际的结果'
}
```

#### ❌ 低效的沟通方式
```typescript
// ❌ 模糊的问题描述
const vagueDescription = [
  '不工作了',           // ❌ 太模糊
  '有问题',             // ❌ 没有具体信息
  '报错了',             // ❌ 没有错误详情
  '跑不起来'            // ❌ 没有上下文
]
```

## 📊 开发质量控制

### ✅ 代码质量检查点

```typescript
const qualityCheckpoints = {
  // 开发前检查
  beforeDevelopment: [
    '确认需求边界',
    '查找可复用代码',
    '制定实现计划'
  ],
  
  // 开发中检查  
  duringDevelopment: [
    '遵循命名规范',
    '添加必要注释',
    '测试核心功能'
  ],
  
  // 开发后检查
  afterDevelopment: [
    '验证功能完整性',
    '检查移动端适配',
    '确认性能表现'
  ]
}
```

## 📋 开发流程检查清单

### 🔧 每次开发开始前
- [ ] 确认当前开发环境正常运行
- [ ] 查找可复用的现有代码
- [ ] 明确本次开发的具体目标
- [ ] 估算合理的开发时间

### 🛠️ 开发过程中
- [ ] 遇到问题优先代码调试
- [ ] 超过15分钟无进展时重新分析
- [ ] 保持开发环境连续稳定
- [ ] 及时记录和解决技术债务

### ✅ 开发完成后
- [ ] 验证功能符合PRD要求
- [ ] 检查移动端适配效果
- [ ] 确认没有遗留问题
- [ ] 简单测试核心流程

**遵循这些开发流程约束，确保高效稳定的开发体验！**
