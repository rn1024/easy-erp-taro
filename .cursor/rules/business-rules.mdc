---
alwaysApply: true
---
# Easy ERP Taro 业务规范

## 项目架构规则
参考项目结构: [package.json](mdc:package.json), [src/app.tsx](mdc:src/app.tsx)

### 目录结构
```
src/
  ├── components/     # 所有组件平铺，不用子目录
  ├── pages/         # 页面文件，每页面独立目录
  ├── types/         # TypeScript 类型定义
  ├── constants/     # 常量和模拟数据
  ├── utils/         # 工具函数
  └── assets/        # 静态资源
```

## 开发流程规范
1. **一次对话原则**: 避免频繁重启服务，保持开发环境稳定
2. **系统性分析**: 多轮操作无效时，停下分析根本问题
3. **全局思维**: 理解问题全貌再行动
4. **复制优先**: 优先复制已有代码再修改适配，减少生成时间

## 页面设计原则
- **页面职责**: 页面 (index.tsx) 不包含复杂组件逻辑
- **组件分离**: 业务逻辑封装在独立组件中
- **布局统一**: 使用 [MobileLayout](mdc:src/components/MobileLayout/index.tsx) 包装页面内容

## 数据管理规范
参考类型定义: [src/types/index.ts](mdc:src/types/index.ts)

### 状态管理
- **本地状态**: 使用 React hooks (useState, useEffect)
- **全局状态**: 使用 Zustand
- **服务端状态**: 统一的 API 响应格式

### 数据类型
```typescript
// 所有API响应必须遵循此格式
interface ApiResponse<T = any> {
  success: boolean
  data: T
  message: string
  code: number
}
```

## 用户体验规范
1. **加载状态**: 所有异步操作提供loading状态
2. **错误处理**: 友好的错误提示和降级方案
3. **触摸反馈**: 重要交互提供触摸反馈动画
4. **无障碍**: 考虑视觉障碍用户的使用需求

## 代码质量标准
- **TypeScript**: 严格类型检查，禁止 any 类型
- **错误处理**: 所有可能失败的操作都要有错误处理
- **注释**: 复杂业务逻辑必须添加注释
- **测试**: 关键业务逻辑需要单元测试

## Git 管理规范
参考 [.git](mdc:.git) 策略：
- 每个子项目独立管理 git 仓库
- 删除根目录 .git 历史
- 提交信息简洁描述变更内容
